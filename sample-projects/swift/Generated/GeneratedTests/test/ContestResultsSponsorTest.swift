/**
 * ContestResultsSponsor.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 13, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class ContestResultsSponsorTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - address1 Tests

extension ContestResultsSponsorTest {

    func testAddress1FromMap() {
        guard let model = ContestResultsSponsor.fromMap(["address1": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.address1, "The address1 is incorrect")
    }

    func testAddress1FromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.address1, "The address1 is not nil")
    }
}

// MARK: - address2 Tests

extension ContestResultsSponsorTest {

    func testAddress2FromMap() {
        guard let model = ContestResultsSponsor.fromMap(["address2": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.address2, "The address2 is incorrect")
    }

    func testAddress2FromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.address2, "The address2 is not nil")
    }
}

// MARK: - category Tests

extension ContestResultsSponsorTest {

    func testCategoryFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["category": "I look at God behind his desk, taking notes on a pad, but God’s got this all wrong."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("I look at God behind his desk, taking notes on a pad, but God’s got this all wrong.", model.category, "The category is incorrect")
    }

    func testCategoryFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.category, "The category is not nil")
    }
}

// MARK: - city Tests

extension ContestResultsSponsorTest {

    func testCityFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["city": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.city, "The city is incorrect")
    }

    func testCityFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.city, "The city is not nil")
    }
}

// MARK: - contactEmail Tests

extension ContestResultsSponsorTest {

    func testContactEmailFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["contactEmail": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.contactEmail, "The contactEmail is incorrect")
    }

    func testContactEmailFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.contactEmail, "The contactEmail is not nil")
    }
}

// MARK: - contactName Tests

extension ContestResultsSponsorTest {

    func testContactNameFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["contactName": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.contactName, "The contactName is incorrect")
    }

    func testContactNameFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.contactName, "The contactName is not nil")
    }
}

// MARK: - contactTitle Tests

extension ContestResultsSponsorTest {

    func testContactTitleFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["contactTitle": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.contactTitle, "The contactTitle is incorrect")
    }

    func testContactTitleFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.contactTitle, "The contactTitle is not nil")
    }
}

// MARK: - id Tests

extension ContestResultsSponsorTest {

    func testTheIdFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["id": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - logo Tests

extension ContestResultsSponsorTest {

    func testLogoFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["logo": "At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves.", model.logo, "The logo is incorrect")
    }

    func testLogoFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.logo, "The logo is not nil")
    }
}

// MARK: - name Tests

extension ContestResultsSponsorTest {

    func testNameFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["name": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - phoneNumber Tests

extension ContestResultsSponsorTest {

    func testPhoneNumberFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["phoneNumber": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.phoneNumber, "The phoneNumber is incorrect")
    }

    func testPhoneNumberFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.phoneNumber, "The phoneNumber is not nil")
    }
}

// MARK: - siteUrl Tests

extension ContestResultsSponsorTest {

    func testSiteUrlFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["siteUrl": "At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves.", model.siteUrl, "The siteUrl is incorrect")
    }

    func testSiteUrlFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.siteUrl, "The siteUrl is not nil")
    }
}

// MARK: - state Tests

extension ContestResultsSponsorTest {

    func testStateFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["state": "At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves.", model.state, "The state is incorrect")
    }

    func testStateFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.state, "The state is not nil")
    }
}

// MARK: - zip Tests

extension ContestResultsSponsorTest {

    func testZipFromMap() {
        guard let model = ContestResultsSponsor.fromMap(["zip": "I don't want to die without any scars."]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertEqual("I don't want to die without any scars.", model.zip, "The zip is incorrect")
    }

    func testZipFromEmptyMap() {
        guard let model = ContestResultsSponsor.fromMap([:]) else {
            XCTFail("The ContestResultsSponsor was nil")
            return
        }

        XCTAssertNil(model.zip, "The zip is not nil")
    }
}

