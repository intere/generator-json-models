/**
 * ContestResultsSummaryTest.swift
 *
 * Generated by JSON Model Generator v0.0.5 on Aug 28, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class ContestResultsSummaryTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - dir Tests

extension ContestResultsSummaryTest {

    func testDirFromMap() {
        guard let model = ContestResultsSummary.fromMap(["dir": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.dir, "The dir is incorrect")
    }

    func testDirFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.dir, "The dir is not nil")
    }
}

// MARK: - dist Tests

extension ContestResultsSummaryTest {

    func testDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["dist": 1.389136325290278E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.389136325290278E308, model.dist, "The dist is incorrect")
    }

    func testDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.dist, "The dist is not nil")
    }
}

// MARK: - duration Tests

extension ContestResultsSummaryTest {

    func testDurationFromMap() {
        guard let model = ContestResultsSummary.fromMap(["duration": 5328128061479084032]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(5328128061479084032, model.duration, "The duration is incorrect")
    }

    func testDurationFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.duration, "The duration is not nil")
    }
}

// MARK: - idx_end Tests

extension ContestResultsSummaryTest {

    func testIdxEndFromMap() {
        guard let model = ContestResultsSummary.fromMap(["idx_end": 6665371436306130944]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(6665371436306130944, model.idxEnd, "The idxEnd is incorrect")
    }

    func testIdxEndFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.idxEnd, "The idxEnd is not nil")
    }
}

// MARK: - idx_start Tests

extension ContestResultsSummaryTest {

    func testIdxStartFromMap() {
        guard let model = ContestResultsSummary.fromMap(["idx_start": 7914086112084247552]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(7914086112084247552, model.idxStart, "The idxStart is incorrect")
    }

    func testIdxStartFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.idxStart, "The idxStart is not nil")
    }
}

// MARK: - max_elev Tests

extension ContestResultsSummaryTest {

    func testMaxElevFromMap() {
        guard let model = ContestResultsSummary.fromMap(["max_elev": 6.836159290166786E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(6.836159290166786E307, model.maxElev, "The maxElev is incorrect")
    }

    func testMaxElevFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.maxElev, "The maxElev is not nil")
    }
}

// MARK: - max_speed Tests

extension ContestResultsSummaryTest {

    func testMaxSpeedFromMap() {
        guard let model = ContestResultsSummary.fromMap(["max_speed": 7.88386091229015E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(7.88386091229015E307, model.maxSpeed, "The maxSpeed is incorrect")
    }

    func testMaxSpeedFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.maxSpeed, "The maxSpeed is not nil")
    }
}

// MARK: - min_elev Tests

extension ContestResultsSummaryTest {

    func testMinElevFromMap() {
        guard let model = ContestResultsSummary.fromMap(["min_elev": 1.5135302701123168E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.5135302701123168E307, model.minElev, "The minElev is incorrect")
    }

    func testMinElevFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.minElev, "The minElev is not nil")
    }
}

// MARK: - runs Tests

extension ContestResultsSummaryTest {

    func testRunsFromMap() {
        guard let model = ContestResultsSummary.fromMap(["runs": 4578807779418712064]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(4578807779418712064, model.runs, "The runs is incorrect")
    }

    func testRunsFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.runs, "The runs is not nil")
    }
}

// MARK: - vAscent Tests

extension ContestResultsSummaryTest {

    func testVAscentFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vAscent": 1.4431641445832984E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.4431641445832984E308, model.vAscent, "The vAscent is incorrect")
    }

    func testVAscentFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vAscent, "The vAscent is not nil")
    }
}

// MARK: - vAscentDist Tests

extension ContestResultsSummaryTest {

    func testVAscentDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vAscentDist": 1.7060166834474105E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.7060166834474105E308, model.vAscentDist, "The vAscentDist is incorrect")
    }

    func testVAscentDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vAscentDist, "The vAscentDist is not nil")
    }
}

// MARK: - vDescent Tests

extension ContestResultsSummaryTest {

    func testVDescentFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vDescent": 1.5768573570920792E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.5768573570920792E307, model.vDescent, "The vDescent is incorrect")
    }

    func testVDescentFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDescent, "The vDescent is not nil")
    }
}

// MARK: - vDescentDist Tests

extension ContestResultsSummaryTest {

    func testVDescentDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vDescentDist": 1.0488228515003444E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.0488228515003444E308, model.vDescentDist, "The vDescentDist is incorrect")
    }

    func testVDescentDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDescentDist, "The vDescentDist is not nil")
    }
}

// MARK: - v_delta Tests

extension ContestResultsSummaryTest {

    func testVDeltaFromMap() {
        guard let model = ContestResultsSummary.fromMap(["v_delta": 2.992385862905454E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(2.992385862905454E307, model.vDelta, "The vDelta is incorrect")
    }

    func testVDeltaFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDelta, "The vDelta is not nil")
    }
}

