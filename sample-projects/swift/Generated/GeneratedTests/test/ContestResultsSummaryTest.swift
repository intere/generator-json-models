/**
 * ContestResultsSummary.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 13, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class ContestResultsSummaryTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - dir Tests

extension ContestResultsSummaryTest {

    func testDirFromMap() {
        guard let model = ContestResultsSummary.fromMap(["dir": "I don't want to die without any scars."]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual("I don't want to die without any scars.", model.dir, "The dir is incorrect")
    }

    func testDirFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.dir, "The dir is not nil")
    }
}

// MARK: - dist Tests

extension ContestResultsSummaryTest {

    func testDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["dist": 8.685719983986684E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(8.685719983986684E307, model.dist, "The dist is incorrect")
    }

    func testDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.dist, "The dist is not nil")
    }
}

// MARK: - duration Tests

extension ContestResultsSummaryTest {

    func testDurationFromMap() {
        guard let model = ContestResultsSummary.fromMap(["duration": 8396947054367376384]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(8396947054367376384, model.duration, "The duration is incorrect")
    }

    func testDurationFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.duration, "The duration is not nil")
    }
}

// MARK: - idx_end Tests

extension ContestResultsSummaryTest {

    func testIdxEndFromMap() {
        guard let model = ContestResultsSummary.fromMap(["idx_end": 795874038172409856]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(795874038172409856, model.idxEnd, "The idxEnd is incorrect")
    }

    func testIdxEndFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.idxEnd, "The idxEnd is not nil")
    }
}

// MARK: - idx_start Tests

extension ContestResultsSummaryTest {

    func testIdxStartFromMap() {
        guard let model = ContestResultsSummary.fromMap(["idx_start": 5207852847059032064]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(5207852847059032064, model.idxStart, "The idxStart is incorrect")
    }

    func testIdxStartFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.idxStart, "The idxStart is not nil")
    }
}

// MARK: - max_elev Tests

extension ContestResultsSummaryTest {

    func testMaxElevFromMap() {
        guard let model = ContestResultsSummary.fromMap(["max_elev": 1.2854232165690598E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.2854232165690598E308, model.maxElev, "The maxElev is incorrect")
    }

    func testMaxElevFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.maxElev, "The maxElev is not nil")
    }
}

// MARK: - max_speed Tests

extension ContestResultsSummaryTest {

    func testMaxSpeedFromMap() {
        guard let model = ContestResultsSummary.fromMap(["max_speed": 1.147319098576421E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.147319098576421E308, model.maxSpeed, "The maxSpeed is incorrect")
    }

    func testMaxSpeedFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.maxSpeed, "The maxSpeed is not nil")
    }
}

// MARK: - min_elev Tests

extension ContestResultsSummaryTest {

    func testMinElevFromMap() {
        guard let model = ContestResultsSummary.fromMap(["min_elev": 1.176043292850111E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.176043292850111E308, model.minElev, "The minElev is incorrect")
    }

    func testMinElevFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.minElev, "The minElev is not nil")
    }
}

// MARK: - runs Tests

extension ContestResultsSummaryTest {

    func testRunsFromMap() {
        guard let model = ContestResultsSummary.fromMap(["runs": 5434168571912184832]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(5434168571912184832, model.runs, "The runs is incorrect")
    }

    func testRunsFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.runs, "The runs is not nil")
    }
}

// MARK: - vAscent Tests

extension ContestResultsSummaryTest {

    func testVAscentFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vAscent": 1.8249691919702397E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.8249691919702397E307, model.vAscent, "The vAscent is incorrect")
    }

    func testVAscentFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vAscent, "The vAscent is not nil")
    }
}

// MARK: - vAscentDist Tests

extension ContestResultsSummaryTest {

    func testVAscentDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vAscentDist": 6.377581921081796E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(6.377581921081796E307, model.vAscentDist, "The vAscentDist is incorrect")
    }

    func testVAscentDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vAscentDist, "The vAscentDist is not nil")
    }
}

// MARK: - vDescent Tests

extension ContestResultsSummaryTest {

    func testVDescentFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vDescent": 1.2132899969396848E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.2132899969396848E308, model.vDescent, "The vDescent is incorrect")
    }

    func testVDescentFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDescent, "The vDescent is not nil")
    }
}

// MARK: - vDescentDist Tests

extension ContestResultsSummaryTest {

    func testVDescentDistFromMap() {
        guard let model = ContestResultsSummary.fromMap(["vDescentDist": 3.0510791131186356E307]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(3.0510791131186356E307, model.vDescentDist, "The vDescentDist is incorrect")
    }

    func testVDescentDistFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDescentDist, "The vDescentDist is not nil")
    }
}

// MARK: - v_delta Tests

extension ContestResultsSummaryTest {

    func testVDeltaFromMap() {
        guard let model = ContestResultsSummary.fromMap(["v_delta": 1.4370342743266993E308]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertEqual(1.4370342743266993E308, model.vDelta, "The vDelta is incorrect")
    }

    func testVDeltaFromEmptyMap() {
        guard let model = ContestResultsSummary.fromMap([:]) else {
            XCTFail("The ContestResultsSummary was nil")
            return
        }

        XCTAssertNil(model.vDelta, "The vDelta is not nil")
    }
}

