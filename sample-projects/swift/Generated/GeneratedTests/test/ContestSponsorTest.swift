/**
 * ContestSponsor.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 12, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class ContestSponsorTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - address1 Tests

extension ContestSponsorTest {

    func testAddress1FromMap() {
        guard let model = ContestSponsor.fromMap(["address1": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.address1, "The address1 is incorrect")
    }

    func testAddress1FromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.address1, "The address1 is not nil")
    }
}

// MARK: - address2 Tests

extension ContestSponsorTest {

    func testAddress2FromMap() {
        guard let model = ContestSponsor.fromMap(["address2": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.address2, "The address2 is incorrect")
    }

    func testAddress2FromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.address2, "The address2 is not nil")
    }
}

// MARK: - category Tests

extension ContestSponsorTest {

    func testCategoryFromMap() {
        guard let model = ContestSponsor.fromMap(["category": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.category, "The category is incorrect")
    }

    func testCategoryFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.category, "The category is not nil")
    }
}

// MARK: - city Tests

extension ContestSponsorTest {

    func testCityFromMap() {
        guard let model = ContestSponsor.fromMap(["city": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.city, "The city is incorrect")
    }

    func testCityFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.city, "The city is not nil")
    }
}

// MARK: - contactEmail Tests

extension ContestSponsorTest {

    func testContactEmailFromMap() {
        guard let model = ContestSponsor.fromMap(["contactEmail": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.contactEmail, "The contactEmail is incorrect")
    }

    func testContactEmailFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.contactEmail, "The contactEmail is not nil")
    }
}

// MARK: - contactName Tests

extension ContestSponsorTest {

    func testContactNameFromMap() {
        guard let model = ContestSponsor.fromMap(["contactName": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.contactName, "The contactName is incorrect")
    }

    func testContactNameFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.contactName, "The contactName is not nil")
    }
}

// MARK: - contactTitle Tests

extension ContestSponsorTest {

    func testContactTitleFromMap() {
        guard let model = ContestSponsor.fromMap(["contactTitle": "At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves.", model.contactTitle, "The contactTitle is incorrect")
    }

    func testContactTitleFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.contactTitle, "The contactTitle is not nil")
    }
}

// MARK: - id Tests

extension ContestSponsorTest {

    func testTheIdFromMap() {
        guard let model = ContestSponsor.fromMap(["id": "The things you used to own, now they own you."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - logo Tests

extension ContestSponsorTest {

    func testLogoFromMap() {
        guard let model = ContestSponsor.fromMap(["logo": "https://www.placecage.com/c/200/200"]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("https://www.placecage.com/c/200/200", model.logo, "The logo is incorrect")
    }

    func testLogoFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.logo, "The logo is not nil")
    }
}

// MARK: - name Tests

extension ContestSponsorTest {

    func testNameFromMap() {
        guard let model = ContestSponsor.fromMap(["name": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - phoneNumber Tests

extension ContestSponsorTest {

    func testPhoneNumberFromMap() {
        guard let model = ContestSponsor.fromMap(["phoneNumber": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.phoneNumber, "The phoneNumber is incorrect")
    }

    func testPhoneNumberFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.phoneNumber, "The phoneNumber is not nil")
    }
}

// MARK: - siteUrl Tests

extension ContestSponsorTest {

    func testSiteUrlFromMap() {
        guard let model = ContestSponsor.fromMap(["siteUrl": "I don't want to die without any scars."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("I don't want to die without any scars.", model.siteUrl, "The siteUrl is incorrect")
    }

    func testSiteUrlFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.siteUrl, "The siteUrl is not nil")
    }
}

// MARK: - state Tests

extension ContestSponsorTest {

    func testStateFromMap() {
        guard let model = ContestSponsor.fromMap(["state": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.state, "The state is incorrect")
    }

    func testStateFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.state, "The state is not nil")
    }
}

// MARK: - zip Tests

extension ContestSponsorTest {

    func testZipFromMap() {
        guard let model = ContestSponsor.fromMap(["zip": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.zip, "The zip is incorrect")
    }

    func testZipFromEmptyMap() {
        guard let model = ContestSponsor.fromMap([:]) else {
            XCTFail("The ContestSponsor was nil")
            return
        }

        XCTAssertNil(model.zip, "The zip is not nil")
    }
}

