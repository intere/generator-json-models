/**
 * EnumerationSkillLevels.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 12, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class EnumerationSkillLevelsTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - description Tests

extension EnumerationSkillLevelsTest {

    func testTheDescriptionFromMap() {
        guard let model = EnumerationSkillLevels.fromMap(["description": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.theDescription, "The theDescription is incorrect")
    }

    func testTheDescriptionFromEmptyMap() {
        guard let model = EnumerationSkillLevels.fromMap([:]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertNil(model.theDescription, "The theDescription is not nil")
    }
}

// MARK: - image Tests

extension EnumerationSkillLevelsTest {

    func testImageFromMap() {
        guard let model = EnumerationSkillLevels.fromMap(["image": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.image, "The image is incorrect")
    }

    func testImageFromEmptyMap() {
        guard let model = EnumerationSkillLevels.fromMap([:]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertNil(model.image, "The image is not nil")
    }
}

// MARK: - name Tests

extension EnumerationSkillLevelsTest {

    func testNameFromMap() {
        guard let model = EnumerationSkillLevels.fromMap(["name": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = EnumerationSkillLevels.fromMap([:]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - value Tests

extension EnumerationSkillLevelsTest {

    func testValueFromMap() {
        guard let model = EnumerationSkillLevels.fromMap(["value": 3275765969844338688]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertEqual(3275765969844338688, model.value, "The value is incorrect")
    }

    func testValueFromEmptyMap() {
        guard let model = EnumerationSkillLevels.fromMap([:]) else {
            XCTFail("The EnumerationSkillLevels was nil")
            return
        }

        XCTAssertNil(model.value, "The value is not nil")
    }
}

