/**
 * TrackGeoJson.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 13, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class TrackGeoJsonTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - coordinates Tests

extension TrackGeoJsonTest {

    func testCoordinatesFromMap() {
        let arrayData = [[1.0375990687408111E308, 1.0524884593199618E308], [1.4150328305591267E308, 9.898296943252993E307]]  // Array of 2 empty objects
        guard let model = TrackGeoJson.fromMap(["coordinates": arrayData ]) else {
            XCTFail("The TrackGeoJson was nil")
            return
        }

        XCTAssertNotNil(model.coordinates, "The coordinates was nil")
        XCTAssertEqual(2, model.coordinates?.count, "The coordinates has the wrong number of objects")
    }

    func testCoordinatesFromEmptyMap() {
        guard let model = TrackGeoJson.fromMap([:]) else {
            XCTFail("The TrackGeoJson was nil")
            return
        }

        XCTAssertNil(model.coordinates, "The coordinates is not nil")
    }
}

// MARK: - type Tests

extension TrackGeoJsonTest {

    func testTypeFromMap() {
        guard let model = TrackGeoJson.fromMap(["type": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The TrackGeoJson was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.type, "The type is incorrect")
    }

    func testTypeFromEmptyMap() {
        guard let model = TrackGeoJson.fromMap([:]) else {
            XCTFail("The TrackGeoJson was nil")
            return
        }

        XCTAssertNil(model.type, "The type is not nil")
    }
}

