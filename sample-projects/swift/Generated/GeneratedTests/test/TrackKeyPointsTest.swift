/**
 * TrackKeyPoints.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 13, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class TrackKeyPointsTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - dir Tests

extension TrackKeyPointsTest {

    func testDirFromMap() {
        guard let model = TrackKeyPoints.fromMap(["dir": 8998390375577818112]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(8998390375577818112, model.dir, "The dir is incorrect")
    }

    func testDirFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.dir, "The dir is not nil")
    }
}

// MARK: - dist Tests

extension TrackKeyPointsTest {

    func testDistFromMap() {
        guard let model = TrackKeyPoints.fromMap(["dist": 3.989955110634898E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(3.989955110634898E307, model.dist, "The dist is incorrect")
    }

    func testDistFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.dist, "The dist is not nil")
    }
}

// MARK: - duration Tests

extension TrackKeyPointsTest {

    func testDurationFromMap() {
        guard let model = TrackKeyPoints.fromMap(["duration": 6426676581611499520]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(6426676581611499520, model.duration, "The duration is incorrect")
    }

    func testDurationFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.duration, "The duration is not nil")
    }
}

// MARK: - idx_end Tests

extension TrackKeyPointsTest {

    func testIdxEndFromMap() {
        guard let model = TrackKeyPoints.fromMap(["idx_end": 372962454578337792]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(372962454578337792, model.idxEnd, "The idxEnd is incorrect")
    }

    func testIdxEndFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.idxEnd, "The idxEnd is not nil")
    }
}

// MARK: - idx_start Tests

extension TrackKeyPointsTest {

    func testIdxStartFromMap() {
        guard let model = TrackKeyPoints.fromMap(["idx_start": 7550532778185564160]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(7550532778185564160, model.idxStart, "The idxStart is incorrect")
    }

    func testIdxStartFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.idxStart, "The idxStart is not nil")
    }
}

// MARK: - max_elev Tests

extension TrackKeyPointsTest {

    func testMaxElevFromMap() {
        guard let model = TrackKeyPoints.fromMap(["max_elev": 1.6926582125643916E308]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(1.6926582125643916E308, model.maxElev, "The maxElev is incorrect")
    }

    func testMaxElevFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.maxElev, "The maxElev is not nil")
    }
}

// MARK: - max_speed Tests

extension TrackKeyPointsTest {

    func testMaxSpeedFromMap() {
        guard let model = TrackKeyPoints.fromMap(["max_speed": 2.272914481231583E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(2.272914481231583E307, model.maxSpeed, "The maxSpeed is incorrect")
    }

    func testMaxSpeedFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.maxSpeed, "The maxSpeed is not nil")
    }
}

// MARK: - min_elev Tests

extension TrackKeyPointsTest {

    func testMinElevFromMap() {
        guard let model = TrackKeyPoints.fromMap(["min_elev": 1.4085182822592486E308]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(1.4085182822592486E308, model.minElev, "The minElev is incorrect")
    }

    func testMinElevFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.minElev, "The minElev is not nil")
    }
}

// MARK: - runs Tests

extension TrackKeyPointsTest {

    func testRunsFromMap() {
        guard let model = TrackKeyPoints.fromMap(["runs": 8954502606795426816]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(8954502606795426816, model.runs, "The runs is incorrect")
    }

    func testRunsFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.runs, "The runs is not nil")
    }
}

// MARK: - vAscent Tests

extension TrackKeyPointsTest {

    func testVAscentFromMap() {
        guard let model = TrackKeyPoints.fromMap(["vAscent": 9.321798417355193E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(9.321798417355193E307, model.vAscent, "The vAscent is incorrect")
    }

    func testVAscentFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.vAscent, "The vAscent is not nil")
    }
}

// MARK: - vAscentDist Tests

extension TrackKeyPointsTest {

    func testVAscentDistFromMap() {
        guard let model = TrackKeyPoints.fromMap(["vAscentDist": 7.068162545950966E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(7.068162545950966E307, model.vAscentDist, "The vAscentDist is incorrect")
    }

    func testVAscentDistFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.vAscentDist, "The vAscentDist is not nil")
    }
}

// MARK: - vDescent Tests

extension TrackKeyPointsTest {

    func testVDescentFromMap() {
        guard let model = TrackKeyPoints.fromMap(["vDescent": 7.096058042226494E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(7.096058042226494E307, model.vDescent, "The vDescent is incorrect")
    }

    func testVDescentFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.vDescent, "The vDescent is not nil")
    }
}

// MARK: - vDescentDist Tests

extension TrackKeyPointsTest {

    func testVDescentDistFromMap() {
        guard let model = TrackKeyPoints.fromMap(["vDescentDist": 1.499739376028163E308]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(1.499739376028163E308, model.vDescentDist, "The vDescentDist is incorrect")
    }

    func testVDescentDistFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.vDescentDist, "The vDescentDist is not nil")
    }
}

// MARK: - v_delta Tests

extension TrackKeyPointsTest {

    func testVDeltaFromMap() {
        guard let model = TrackKeyPoints.fromMap(["v_delta": 2.53738470212631E307]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertEqual(2.53738470212631E307, model.vDelta, "The vDelta is incorrect")
    }

    func testVDeltaFromEmptyMap() {
        guard let model = TrackKeyPoints.fromMap([:]) else {
            XCTFail("The TrackKeyPoints was nil")
            return
        }

        XCTAssertNil(model.vDelta, "The vDelta is not nil")
    }
}

