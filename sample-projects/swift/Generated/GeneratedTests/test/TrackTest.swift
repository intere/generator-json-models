/**
 * TrackTest.swift
 *
 * Generated by JSON Model Generator v0.0.5 on Aug 28, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class TrackTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - asc Tests

extension TrackTest {

    func testAscFromMap() {
        guard let model = Track.fromMap(["asc": 1.8727435053887468E307]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(1.8727435053887468E307, model.asc, "The asc is incorrect")
    }

    func testAscFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.asc, "The asc is not nil")
    }
}

// MARK: - date Tests

extension TrackTest {

    func testDateFromMap() {
        let date = NSDate()
        let dateInt = Int(date.timeIntervalSince1970 * 1000) // SSE (double) to MSSE (Int)
        guard let model = Track.fromMap(["date": dateInt]) else {
            XCTFail("The Track was nil")
            return
        }

        guard let result = model.date else {
            XCTFail("The date date is nil")
            return
        }

        XCTAssertEqualWithAccuracy(date.timeIntervalSince1970, result.timeIntervalSince1970, accuracy: 0.01, "The date date is incorrect")
    }

    func testDateFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.date, "The date is not nil")
    }
}

// MARK: - desc Tests

extension TrackTest {

    func testDescFromMap() {
        guard let model = Track.fromMap(["desc": 3.878879928033275E307]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(3.878879928033275E307, model.desc, "The desc is incorrect")
    }

    func testDescFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.desc, "The desc is not nil")
    }
}

// MARK: - description Tests

extension TrackTest {

    func testTheDescriptionFromMap() {
        guard let model = Track.fromMap(["description": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.theDescription, "The theDescription is incorrect")
    }

    func testTheDescriptionFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.theDescription, "The theDescription is not nil")
    }
}

// MARK: - dirty Tests

extension TrackTest {

    func testDirtyFromMap() {
        guard let model = Track.fromMap(["dirty": true]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(true, model.dirty, "The dirty is incorrect")
    }

    func testDirtyFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.dirty, "The dirty is not nil")
    }
}

// MARK: - dist Tests

extension TrackTest {

    func testDistFromMap() {
        guard let model = Track.fromMap(["dist": 6.266821674370662E307]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(6.266821674370662E307, model.dist, "The dist is incorrect")
    }

    func testDistFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.dist, "The dist is not nil")
    }
}

// MARK: - dur Tests

extension TrackTest {

    func testDurFromMap() {
        guard let model = Track.fromMap(["dur": 5700909472087342080]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(5700909472087342080, model.dur, "The dur is incorrect")
    }

    func testDurFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.dur, "The dur is not nil")
    }
}

// MARK: - filename Tests

extension TrackTest {

    func testFilenameFromMap() {
        guard let model = Track.fromMap(["filename": "The things you used to own, now they own you."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.filename, "The filename is incorrect")
    }

    func testFilenameFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.filename, "The filename is not nil")
    }
}

// MARK: - geoJson Tests

extension TrackTest {

    func testGeoJsonFromMap() {
        guard let model = Track.fromMap(["geoJson":[:]]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNotNil(model.geoJson, "The geoJson is nil")
    }

    func testGeoJsonFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.geoJson, "The geoJson is not nil")
    }
}

// MARK: - id Tests

extension TrackTest {

    func testTheIdFromMap() {
        guard let model = Track.fromMap(["id": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - key_points Tests

extension TrackTest {

    func testKeyPointsFromMap() {
        let arrayData = [[:], [:]]  // Array of 2 empty objects
        guard let model = Track.fromMap(["key_points": arrayData ]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNotNil(model.keyPoints, "The keyPoints was nil")
        XCTAssertEqual(2, model.keyPoints?.count, "The keyPoints has the wrong number of objects")
    }

    func testKeyPointsFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.keyPoints, "The keyPoints is not nil")
    }
}

// MARK: - max_alt Tests

extension TrackTest {

    func testMaxAltFromMap() {
        guard let model = Track.fromMap(["max_alt": 4454196385951788032]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(4454196385951788032, model.maxAlt, "The maxAlt is incorrect")
    }

    func testMaxAltFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.maxAlt, "The maxAlt is not nil")
    }
}

// MARK: - max_speed Tests

extension TrackTest {

    func testMaxSpeedFromMap() {
        guard let model = Track.fromMap(["max_speed": 8.359962045090826E307]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(8.359962045090826E307, model.maxSpeed, "The maxSpeed is incorrect")
    }

    func testMaxSpeedFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.maxSpeed, "The maxSpeed is not nil")
    }
}

// MARK: - metadataId Tests

extension TrackTest {

    func testMetadataIdFromMap() {
        guard let model = Track.fromMap(["metadataId": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.metadataId, "The metadataId is incorrect")
    }

    func testMetadataIdFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.metadataId, "The metadataId is not nil")
    }
}

// MARK: - min_alt Tests

extension TrackTest {

    func testMinAltFromMap() {
        guard let model = Track.fromMap(["min_alt": 1.0733155435701435E308]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(1.0733155435701435E308, model.minAlt, "The minAlt is incorrect")
    }

    func testMinAltFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.minAlt, "The minAlt is not nil")
    }
}

// MARK: - name Tests

extension TrackTest {

    func testNameFromMap() {
        guard let model = Track.fromMap(["name": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - owner Tests

extension TrackTest {

    func testOwnerFromMap() {
        guard let model = Track.fromMap(["owner": "The things you used to own, now they own you."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.owner, "The owner is incorrect")
    }

    func testOwnerFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.owner, "The owner is not nil")
    }
}

// MARK: - points Tests

extension TrackTest {

    func testPointsFromMap() {
        let arrayData = [[:], [:]]  // Array of 2 empty objects
        guard let model = Track.fromMap(["points": arrayData ]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNotNil(model.points, "The points was nil")
        XCTAssertEqual(2, model.points?.count, "The points has the wrong number of objects")
    }

    func testPointsFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.points, "The points is not nil")
    }
}

// MARK: - runs Tests

extension TrackTest {

    func testRunsFromMap() {
        guard let model = Track.fromMap(["runs": 7766478979907138560]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual(7766478979907138560, model.runs, "The runs is incorrect")
    }

    func testRunsFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.runs, "The runs is not nil")
    }
}

// MARK: - summary Tests

extension TrackTest {

    func testSummaryFromMap() {
        guard let model = Track.fromMap(["summary": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.summary, "The summary is incorrect")
    }

    func testSummaryFromEmptyMap() {
        guard let model = Track.fromMap([:]) else {
            XCTFail("The Track was nil")
            return
        }

        XCTAssertNil(model.summary, "The summary is not nil")
    }
}

