/**
 * UserTest.swift
 *
 * Generated by JSON Model Generator v0.0.5 on Aug 28, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class UserTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - accountCreationDate Tests

extension UserTest {

    func testAccountCreationDateFromMap() {
        let date = NSDate()
        let dateInt = Int(date.timeIntervalSince1970 * 1000) // SSE (double) to MSSE (Int)
        guard let model = User.fromMap(["accountCreationDate": dateInt]) else {
            XCTFail("The User was nil")
            return
        }

        guard let result = model.accountCreationDate else {
            XCTFail("The accountCreationDate date is nil")
            return
        }

        XCTAssertEqualWithAccuracy(date.timeIntervalSince1970, result.timeIntervalSince1970, accuracy: 0.01, "The accountCreationDate date is incorrect")
    }

    func testAccountCreationDateFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.accountCreationDate, "The accountCreationDate is not nil")
    }
}

// MARK: - admin Tests

extension UserTest {

    func testAdminFromMap() {
        guard let model = User.fromMap(["admin": true]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(true, model.admin, "The admin is incorrect")
    }

    func testAdminFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.admin, "The admin is not nil")
    }
}

// MARK: - age Tests

extension UserTest {

    func testAgeFromMap() {
        guard let model = User.fromMap(["age": 3864462718857900032]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(3864462718857900032, model.age, "The age is incorrect")
    }

    func testAgeFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.age, "The age is not nil")
    }
}

// MARK: - email Tests

extension UserTest {

    func testEmailFromMap() {
        guard let model = User.fromMap(["email": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.email, "The email is incorrect")
    }

    func testEmailFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.email, "The email is not nil")
    }
}

// MARK: - emailUser Tests

extension UserTest {

    func testEmailUserFromMap() {
        guard let model = User.fromMap(["emailUser": false]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(false, model.emailUser, "The emailUser is incorrect")
    }

    func testEmailUserFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.emailUser, "The emailUser is not nil")
    }
}

// MARK: - facebookId Tests

extension UserTest {

    func testFacebookIdFromMap() {
        guard let model = User.fromMap(["facebookId": "I don't want to die without any scars."]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual("I don't want to die without any scars.", model.facebookId, "The facebookId is incorrect")
    }

    func testFacebookIdFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.facebookId, "The facebookId is not nil")
    }
}

// MARK: - facebookUser Tests

extension UserTest {

    func testFacebookUserFromMap() {
        guard let model = User.fromMap(["facebookUser": true]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(true, model.facebookUser, "The facebookUser is incorrect")
    }

    func testFacebookUserFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.facebookUser, "The facebookUser is not nil")
    }
}

// MARK: - id Tests

extension UserTest {

    func testTheIdFromMap() {
        guard let model = User.fromMap(["id": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - lastLoggedIn Tests

extension UserTest {

    func testLastLoggedInFromMap() {
        let date = NSDate()
        let dateInt = Int(date.timeIntervalSince1970 * 1000) // SSE (double) to MSSE (Int)
        guard let model = User.fromMap(["lastLoggedIn": dateInt]) else {
            XCTFail("The User was nil")
            return
        }

        guard let result = model.lastLoggedIn else {
            XCTFail("The lastLoggedIn date is nil")
            return
        }

        XCTAssertEqualWithAccuracy(date.timeIntervalSince1970, result.timeIntervalSince1970, accuracy: 0.01, "The lastLoggedIn date is incorrect")
    }

    func testLastLoggedInFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.lastLoggedIn, "The lastLoggedIn is not nil")
    }
}

// MARK: - name Tests

extension UserTest {

    func testNameFromMap() {
        guard let model = User.fromMap(["name": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - prototype Tests

extension UserTest {

    func testPrototypeFromMap() {
        guard let model = User.fromMap(["prototype": true]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(true, model.prototype, "The prototype is incorrect")
    }

    func testPrototypeFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.prototype, "The prototype is not nil")
    }
}

// MARK: - skillLevel Tests

extension UserTest {

    func testSkillLevelFromMap() {
        guard let model = User.fromMap(["skillLevel": 1330638628368268288]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(1330638628368268288, model.skillLevel, "The skillLevel is incorrect")
    }

    func testSkillLevelFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.skillLevel, "The skillLevel is not nil")
    }
}

// MARK: - type Tests

extension UserTest {

    func testTypeFromMap() {
        guard let model = User.fromMap(["type": 1417158441764017152]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(1417158441764017152, model.type, "The type is incorrect")
    }

    func testTypeFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.type, "The type is not nil")
    }
}

// MARK: - username Tests

extension UserTest {

    func testUsernameFromMap() {
        guard let model = User.fromMap(["username": "I look at God behind his desk, taking notes on a pad, but God’s got this all wrong."]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual("I look at God behind his desk, taking notes on a pad, but God’s got this all wrong.", model.username, "The username is incorrect")
    }

    func testUsernameFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.username, "The username is not nil")
    }
}

// MARK: - weightInKg Tests

extension UserTest {

    func testWeightInKgFromMap() {
        guard let model = User.fromMap(["weightInKg": 4608544541214002176]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertEqual(4608544541214002176, model.weightInKg, "The weightInKg is incorrect")
    }

    func testWeightInKgFromEmptyMap() {
        guard let model = User.fromMap([:]) else {
            XCTFail("The User was nil")
            return
        }

        XCTAssertNil(model.weightInKg, "The weightInKg is not nil")
    }
}

