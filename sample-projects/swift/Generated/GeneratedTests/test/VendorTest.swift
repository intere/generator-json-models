/**
 * Vendor.swift
 *
 * Generated by JSON Model Generator v0.0.4 on Aug 13, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class VendorTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - address1 Tests

extension VendorTest {

    func testAddress1FromMap() {
        guard let model = Vendor.fromMap(["address1": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.address1, "The address1 is incorrect")
    }

    func testAddress1FromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.address1, "The address1 is not nil")
    }
}

// MARK: - address2 Tests

extension VendorTest {

    func testAddress2FromMap() {
        guard let model = Vendor.fromMap(["address2": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.address2, "The address2 is incorrect")
    }

    func testAddress2FromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.address2, "The address2 is not nil")
    }
}

// MARK: - category Tests

extension VendorTest {

    func testCategoryFromMap() {
        guard let model = Vendor.fromMap(["category": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.category, "The category is incorrect")
    }

    func testCategoryFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.category, "The category is not nil")
    }
}

// MARK: - city Tests

extension VendorTest {

    func testCityFromMap() {
        guard let model = Vendor.fromMap(["city": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.city, "The city is incorrect")
    }

    func testCityFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.city, "The city is not nil")
    }
}

// MARK: - contactEmail Tests

extension VendorTest {

    func testContactEmailFromMap() {
        guard let model = Vendor.fromMap(["contactEmail": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.contactEmail, "The contactEmail is incorrect")
    }

    func testContactEmailFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactEmail, "The contactEmail is not nil")
    }
}

// MARK: - contactName Tests

extension VendorTest {

    func testContactNameFromMap() {
        guard let model = Vendor.fromMap(["contactName": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.contactName, "The contactName is incorrect")
    }

    func testContactNameFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactName, "The contactName is not nil")
    }
}

// MARK: - contactTitle Tests

extension VendorTest {

    func testContactTitleFromMap() {
        guard let model = Vendor.fromMap(["contactTitle": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.contactTitle, "The contactTitle is incorrect")
    }

    func testContactTitleFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactTitle, "The contactTitle is not nil")
    }
}

// MARK: - id Tests

extension VendorTest {

    func testTheIdFromMap() {
        guard let model = Vendor.fromMap(["id": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - logo Tests

extension VendorTest {

    func testLogoFromMap() {
        guard let model = Vendor.fromMap(["logo": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.logo, "The logo is incorrect")
    }

    func testLogoFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.logo, "The logo is not nil")
    }
}

// MARK: - name Tests

extension VendorTest {

    func testNameFromMap() {
        guard let model = Vendor.fromMap(["name": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - phoneNumber Tests

extension VendorTest {

    func testPhoneNumberFromMap() {
        guard let model = Vendor.fromMap(["phoneNumber": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.phoneNumber, "The phoneNumber is incorrect")
    }

    func testPhoneNumberFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.phoneNumber, "The phoneNumber is not nil")
    }
}

// MARK: - siteUrl Tests

extension VendorTest {

    func testSiteUrlFromMap() {
        guard let model = Vendor.fromMap(["siteUrl": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.siteUrl, "The siteUrl is incorrect")
    }

    func testSiteUrlFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.siteUrl, "The siteUrl is not nil")
    }
}

// MARK: - state Tests

extension VendorTest {

    func testStateFromMap() {
        guard let model = Vendor.fromMap(["state": "I wanted to destroy everything beautiful I'd never have."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I wanted to destroy everything beautiful I'd never have.", model.state, "The state is incorrect")
    }

    func testStateFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.state, "The state is not nil")
    }
}

// MARK: - zip Tests

extension VendorTest {

    func testZipFromMap() {
        guard let model = Vendor.fromMap(["zip": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.zip, "The zip is incorrect")
    }

    func testZipFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.zip, "The zip is not nil")
    }
}

