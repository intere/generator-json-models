/**
 * VendorTest.swift
 *
 * Generated by JSON Model Generator v0.0.5 on Aug 28, 2016
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import Generated

class VendorTest: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

// MARK: - address1 Tests

extension VendorTest {

    func testAddress1FromMap() {
        guard let model = Vendor.fromMap(["address1": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.address1, "The address1 is incorrect")
    }

    func testAddress1FromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.address1, "The address1 is not nil")
    }
}

// MARK: - address2 Tests

extension VendorTest {

    func testAddress2FromMap() {
        guard let model = Vendor.fromMap(["address2": "I don't want to die without any scars."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I don't want to die without any scars.", model.address2, "The address2 is incorrect")
    }

    func testAddress2FromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.address2, "The address2 is not nil")
    }
}

// MARK: - category Tests

extension VendorTest {

    func testCategoryFromMap() {
        guard let model = Vendor.fromMap(["category": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.category, "The category is incorrect")
    }

    func testCategoryFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.category, "The category is not nil")
    }
}

// MARK: - city Tests

extension VendorTest {

    func testCityFromMap() {
        guard let model = Vendor.fromMap(["city": "At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("At the time, my life just seemed too complete, and maybe we have to break everything to make something better out of ourselves.", model.city, "The city is incorrect")
    }

    func testCityFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.city, "The city is not nil")
    }
}

// MARK: - contactEmail Tests

extension VendorTest {

    func testContactEmailFromMap() {
        guard let model = Vendor.fromMap(["contactEmail": "We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("We've all been raised on television to believe that one day we'd all be millionaires, and movie gods, and rock stars. But we won't. And we're slowly learning that fact. And we're very, very pissed off.", model.contactEmail, "The contactEmail is incorrect")
    }

    func testContactEmailFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactEmail, "The contactEmail is not nil")
    }
}

// MARK: - contactName Tests

extension VendorTest {

    func testContactNameFromMap() {
        guard let model = Vendor.fromMap(["contactName": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.contactName, "The contactName is incorrect")
    }

    func testContactNameFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactName, "The contactName is not nil")
    }
}

// MARK: - contactTitle Tests

extension VendorTest {

    func testContactTitleFromMap() {
        guard let model = Vendor.fromMap(["contactTitle": "I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I let go. Lost in oblivion. Dark and silent and complete. I found freedom. Losing all hope was freedom.", model.contactTitle, "The contactTitle is incorrect")
    }

    func testContactTitleFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.contactTitle, "The contactTitle is not nil")
    }
}

// MARK: - id Tests

extension VendorTest {

    func testTheIdFromMap() {
        guard let model = Vendor.fromMap(["id": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.theId, "The theId is incorrect")
    }

    func testTheIdFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.theId, "The theId is not nil")
    }
}

// MARK: - logo Tests

extension VendorTest {

    func testLogoFromMap() {
        guard let model = Vendor.fromMap(["logo": "The things you used to own, now they own you."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("The things you used to own, now they own you.", model.logo, "The logo is incorrect")
    }

    func testLogoFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.logo, "The logo is not nil")
    }
}

// MARK: - name Tests

extension VendorTest {

    func testNameFromMap() {
        guard let model = Vendor.fromMap(["name": "I look at God behind his desk, taking notes on a pad, but God’s got this all wrong."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I look at God behind his desk, taking notes on a pad, but God’s got this all wrong.", model.name, "The name is incorrect")
    }

    func testNameFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.name, "The name is not nil")
    }
}

// MARK: - phoneNumber Tests

extension VendorTest {

    func testPhoneNumberFromMap() {
        guard let model = Vendor.fromMap(["phoneNumber": "It's only after we've lost everything that we're free to do anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("It's only after we've lost everything that we're free to do anything.", model.phoneNumber, "The phoneNumber is incorrect")
    }

    func testPhoneNumberFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.phoneNumber, "The phoneNumber is not nil")
    }
}

// MARK: - siteUrl Tests

extension VendorTest {

    func testSiteUrlFromMap() {
        guard let model = Vendor.fromMap(["siteUrl": "Yeah. Well. Whatever. You can’t teach God anything."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("Yeah. Well. Whatever. You can’t teach God anything.", model.siteUrl, "The siteUrl is incorrect")
    }

    func testSiteUrlFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.siteUrl, "The siteUrl is not nil")
    }
}

// MARK: - state Tests

extension VendorTest {

    func testStateFromMap() {
        guard let model = Vendor.fromMap(["state": "I look at God behind his desk, taking notes on a pad, but God’s got this all wrong."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("I look at God behind his desk, taking notes on a pad, but God’s got this all wrong.", model.state, "The state is incorrect")
    }

    func testStateFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.state, "The state is not nil")
    }
}

// MARK: - zip Tests

extension VendorTest {

    func testZipFromMap() {
        guard let model = Vendor.fromMap(["zip": "You know how they say you only hurt the ones you love? Well, it works both ways."]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertEqual("You know how they say you only hurt the ones you love? Well, it works both ways.", model.zip, "The zip is incorrect")
    }

    func testZipFromEmptyMap() {
        guard let model = Vendor.fromMap([:]) else {
            XCTFail("The Vendor was nil")
            return
        }

        XCTAssertNil(model.zip, "The zip is not nil")
    }
}

