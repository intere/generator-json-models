package com.intere.generator.builder.generation;

import java.util.Iterator;

import org.codehaus.jackson.JsonNode;

import com.intere.generator.App;
import com.intere.generator.builder.interpreter.JavaInterpreter;
import com.intere.generator.builder.interpreter.JsonLanguageInterpreter;
import com.intere.generator.deserializer.JsonDeserializer;

public class JavaGeneration extends CodeGeneration {

	@Override
	public String generateHeaderFile(JsonDeserializer deserializer) {
		return null;	// Java doesn't have header files
	}

	private String buildGettersAndSetters(JsonNode node, String className, String name) {
		String propName = getInterpreter().cleanVariableName(name);
		String propType = getNodeType(node, className, name);
		String getSetName = getInterpreter().buildGetterAndSetterName(name);

		return "\t/**\n" +
			"\t * Setter for " + propName + " property.\n" +
			"\t */\n" +
			"\tpublic void set" + getSetName + "(" + propType + " " + propName + ") {\n" +
			"\t\tthis." + propName + " = " + propName + ";\n" +
			"\t}\n\n" +
			"\t/**\n" +
			"\t * Getter for " + propName + " property.\n" +
			"\t */\n" +
			"\tpublic " + propType + " get" + getSetName + "() {\n" +
			"\t\treturn " + propName + ";\n" +
			"\t}\n\n";
	}

	public String buildPropertyDeclaration(JsonNode node, String className, String name) {
		String propName = getInterpreter().cleanVariableName(name);

		return "private " + getNodeType(node, className, name) + " " + propName + ";\n";
	}

	public String getNodeType(JsonNode node, String className, String name) {
		String subClass = getInterpreter().buildSubClassName(className, name);
		if(node.isTextual()) {
			return "String";
		} else if(node.isInt()) {
			return "Long";
		} else if(node.isFloatingPointNumber()) {
			return "Double";
		} else if(node.isBoolean()) {
			return "Boolean";
		} else if(node.isObject()) {
			return subClass;
		} else if(node.isArray()) {
			if(node.iterator().hasNext()) {
				return "List<" + getNodeType(node.iterator().next(), className, name) + ">";
			} else {
				return "List";
			}
		}

		return "";
	}

	@Override
	public String generateImplementationFile(JsonDeserializer deserializer) {
		String className = deserializer.getName();
		String filename = getInterpreter().buildFilenameFromClassname(className);
		String packageName = deserializer.getNamespace();
		JsonNode node = deserializer.getNode();

		StringBuilder builder = new StringBuilder();
		builder.append("/*\n" +
				" *  " + filename + ".java\n" +
				" *  Generated by JSON Model Generator v" + App.getVersion() + " on " + getDate() + ".\n" +
				" *    https://github.com/intere/generator-json-models\n" +
				" *\n" +
				" *    The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content\n" +
				" *\n" +
				" */\n\n");
		builder.append("package " + packageName + ";\n\n");
		builder.append("import java.util.List;\n" +
				"import java.io.Serializable;\n");

		builder.append("\n\npublic class " + className + " implements Serializable {\n");

		Iterator<String> iter = node.getFieldNames();
		while(iter.hasNext()) {
			String name = iter.next();
			builder.append("\t" + buildPropertyDeclaration(node.get(name), className, name));
		}

		builder.append("\n");

		iter = node.getFieldNames();
		while(iter.hasNext()) {
			String name = iter.next();
			builder.append(buildGettersAndSetters(node.get(name), className, name));
		}

		builder.append("}\n");

		return builder.toString();
	}
	
	@Override
	public String generateTestFile(JsonDeserializer deserializer, String jsonFilename, String jsonTestFilename) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public JsonLanguageInterpreter getInterpreter() {
		return new JavaInterpreter();
	}
}
