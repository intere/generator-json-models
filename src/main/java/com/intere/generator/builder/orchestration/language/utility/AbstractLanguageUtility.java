package com.intere.generator.builder.orchestration.language.utility;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.regex.Pattern;

import org.apache.commons.io.IOUtils;

import com.intere.generator.App;
import com.intere.generator.metadata.ModelClass;
import com.intere.generator.metadata.ModelClassProperty;

public abstract class AbstractLanguageUtility implements LanguageUtility {
	@Override
	public String tabs(int tabCount) {
		StringBuilder builder = new StringBuilder();
		for(int i=0;i<tabCount; i++) {
			builder.append("\t");
		}
		return builder.toString();
	}
	
	@Override
	public String singleLineComment(String comment) {
		return singleLineComment(comment, 0);
	}
	
	@Override
	public String singleLineComment(String comment, int tabCount) {
		return tabs(tabCount) + "// " + comment;
	}
	
	@Override
	public String multiLineComment(String comment) {
		return multiLineComment(comment, 0);
	}

	@Override
	public String multiLineComment(String comment, int tabCount) {
		comment = comment.trim();
		String nlReplacement = "\n" + tabs(tabCount) + " * ";
		return tabs(tabCount) + "/**\n" + tabs(tabCount) + " * " + comment.replaceAll("\\\n", nlReplacement) + "\n" + tabs(tabCount) + "*/";
	}
	
	@Override
	public String buildFileComment(String filename) {
		return multiLineComment("\n" +
				filename + "\n" +
				"\n" +
				"Generated by JSON Model Generator v" + App.getVersion() + " on " + getDate() + ".\n" +
				"https://github.com/intere/generator-json-models\n" +
				"\n" +
				"The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content\n" +
				"\n") + "\n\n";
	}
	
	@Override
	public String buildPropertyDeclarations(ModelClass modelClass) {
		StringBuilder builder = new StringBuilder();
		for(ModelClassProperty prop : modelClass.getProperty()) {
			builder.append(buildSinglePropertyDeclaration(prop));
		}
		
		builder.append("\n");
		return builder.toString();
	}
	
	public static String getDate() {
		return new Date().toString();
	}
	

	
	/**
	 * Reads a resource (from the classpath) to a string for you.
	 * @param resourceName
	 * @return
	 * @throws IOException
	 */
	public String readResource(String resourceName) throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		InputStream in = App.class.getResourceAsStream(resourceName);
		IOUtils.copy(in, out);
		
		return new String(out.toByteArray());
	}
	
	public String readFile(String filename) throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		InputStream in = new FileInputStream(filename);
		IOUtils.copy(in, out);
		
		return new String(out.toByteArray());
	}
	
	/**
	 * Reads the provided resource and performs the substitution specified by 
	 * {{@link #replaceHeaderVariables(String)}.
	 * @param resourceName The resource you would like to read.
	 * @return
	 * @throws IOException
	 */
	public String readResourceAndReplaceHeaders(String resourceName) throws IOException {
		return replaceHeaderVariables(readResource(resourceName));
	}
	
	/**
	 * Replaces the "${version}" string with the version and "${date}" with the date/time.
	 * @param input
	 * @return
	 */
	protected String replaceHeaderVariables(String input) {
		return input.replaceAll(Pattern.quote("${version}"), App.getVersion())
				.replaceAll(Pattern.quote("${date}"), new Date().toString());
	}
}
