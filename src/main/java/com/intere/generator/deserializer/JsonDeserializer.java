package com.intere.generator.deserializer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.NavigableMap;
import java.util.TreeMap;

import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.map.ObjectMapper;

public class JsonDeserializer {

	private String json;
	private JsonNode node;
	private String name;
	private NavigableMap<String, List<JsonDeserializer>> subClasses;
	
	/**
	 * Constructor that is used to hierarchically build the class structures for the JSON model.
	 * @param subClasses A map to keep track of the hierarchical Class Tree Structure (passed throughout all child instances).
	 * @param name This classes name.
	 * @param json The Json String to be parsed for this part of the class tree.
	 * @throws JsonParseException
	 * @throws IOException
	 */
	public JsonDeserializer(NavigableMap<String, List<JsonDeserializer>> subClasses, String name, String json) throws JsonParseException, IOException {
		this.subClasses = subClasses;
		this.name = name;
		this.json = json;
		parseJson();
		buildObjectNodeTree();
	}
	
	/**
	 * This is the "User Constructor" if you will.  It is the root class for the JSON
	 * @param name The root class name.
	 * @param json The JSON for the root class.
	 * @throws JsonParseException
	 * @throws IOException
	 */
	public JsonDeserializer(String name, String json) throws JsonParseException, IOException {
		this(new TreeMap<String, List<JsonDeserializer>>(), name, json);
	}

	/**
	 * Parses the JSON to create the {@link JsonNode} that this class instance works with.
	 * @throws JsonParseException
	 * @throws IOException
	 */
	private void parseJson() throws JsonParseException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		JsonFactory factory = mapper.getJsonFactory(); // since 2.1 use mapper.getFactory() instead
		JsonParser jp = factory.createJsonParser(json);
		node = mapper.readTree(jp);
	}
	
	/**
	 * This is what builds out the {@link JsonDeserializer} tree structure, recursively.
	 * @throws JsonParseException
	 * @throws IOException
	 */
	private void buildObjectNodeTree() throws JsonParseException, IOException {
		Iterator<String> iter = node.getFieldNames();
		
		while(iter.hasNext()) {
			String name = iter.next();
			JsonNode childNode = node.get(name);
			if(childNode.isObject()) {
				addChildClass(new JsonDeserializer(subClasses, JsonNodeUtils.buildSubClassName(getName(), name), childNode.toString()));
			} else if (JsonNodeUtils.isArrayOfObjects(childNode)) {
				addChildClass(new JsonDeserializer(subClasses, JsonNodeUtils.buildSubClassName(getName(), name), childNode.iterator().next().toString()));
			}
		}
	}
	
	private void addChildClass(JsonDeserializer child) {
		if(!subClasses.containsKey(name)) {
			subClasses.put(name, new ArrayList<JsonDeserializer>());
		}
		subClasses.get(name).add(child);
	}
	
	/**
	 * Generates the Header file using the JSON String.
	 * @return a String.
	 * @throws IOException 
	 * @throws JsonParseException 
	 */
	public String generateHeaderFile() {
		StringBuilder builder = new StringBuilder();
		builder.append("//\n" + 
				"//  " + name + ".h\n" + 
				"//\n" + 
				"//  Generated by objection-c generator on " + getDate() + ".\n" + 
				"//\n" + 
				"//\n\n" +
				"#import <Foundation/Foundation.h>\n\n");
		
		if(subClasses.containsKey(this.name)) {
			for(JsonDeserializer des : subClasses.get(this.name)) {
				builder.append("#import \"" + des.name + ".h\"\n");
			}
		}
		
		builder.append("@interface " + name + " : NSObject\n\n" +
				"//\n" +
				"// Properties\n" + 
				"//\n\n");
		
		// Now - go generate all of the properties:
		Iterator<String> iter = node.getFieldNames();
		
		while(iter.hasNext()) {
			String name = iter.next();
			builder.append(JsonNodeUtils.buildPropertyDeclaration(node.get(name), getName(), name));
		}
		
		//
		// Now generate the serialize / deserialize declarations:
		//
		builder.append("\n\n" +
			"/**\n" + 
			" * Converts this " + name + " to a NSDictionary object (as a serialization mechanism).\n" + 
			" */\n" + 
			"-(NSDictionary *)toDictionary;\n" + 
			"\n" + 
			"/**\n" + 
			" * Converts this " + name + " to a JSON String (as a serializaton mechanism).\n" + 
			" */\n" + 
			"-(NSString *)toJson;\n" +
			"/**\n" +
			" * Converts this " + name + " to a JSON String (as a serialization mechanism) with optional pretty print.\n" +
			" */\n" + 
			"-(NSString *)toJson:(BOOL)pretty;\n" + 
			"\n" + 
			"/**\n" + 
			" * \"Deserializes\" the provided dictionary into a " + name + ".\n" + 
			" */\n" + 
			"+(" + name + " *)fromDictionary:(NSDictionary *)dict;\n" + 
			"\n" + 
			"/**\n" + 
			" * Deserializes the provided JSON String into a " + name + ".\n" + 
			" */\n" + 
			"+(" + name + " *)fromJsonString:(NSString *)json;\n" + 
			"/**\n" + 
			" * \"Deserializes\" the provided array of dictionaries into an array of " + name + ".\n" + 
			" */\n" + 
			"+(NSMutableArray *)fromArrayOfDictionaries:(NSArray *)array;\n" + 
			"\n" + 
			"/**\n" + 
			" * \"Serializes\" the provided Array of " + name + " to an Array of Dictionaries.\n" + 
			" */\n" + 
			"+(NSMutableArray *)toArrayOfDictionaries:(NSArray *)array;" +
			"\n\n");
		
		builder.append("@end\n\n");
		
		return builder.toString();
	}

	/**
	 * Builds the ".m" (Implementation) file.
	 * @return The file contents.
	 */
	public String generateImplementationFile() {
		StringBuilder builder = new StringBuilder();
		
		builder.append("//\n" + 
				"//  " + name + ".m\n" + 
				"//\n" + 
				"//  Generated by objection-c generator on " + getDate() + ".\n" + 
				"//\n" + 
				"//\n\n" +
				"#import \"" + name + ".h\"\n" + 
				"#import \"Serializer.h\"\n\n");
		
		//
		// Create the serialization precompiler definitions:
		//
		Iterator<String> iter = node.getFieldNames();
		while(iter.hasNext()) {			
			String name = iter.next();
			builder.append(JsonNodeUtils.buildPoundDefineSerializerDeclarations(name));
		}
		
		//
		// Class Definition:
		//
		builder.append("\n\n@implementation " + name + "\n\n" +
			"#pragma mark Serialization Methods\n\n");
		
		//
		// toDictionary Method
		//
		builder.append("-(NSDictionary *)toDictionary {\n" + 
			"\tNSMutableDictionary *dict = [[NSMutableDictionary alloc]init];\n\n");
		iter = node.getFieldNames();
		
		while(iter.hasNext()) {
			String name = iter.next();
			builder.append("\t" + JsonNodeUtils.buildGeneratedSerializePropertyString(node.get(name), getName(), name));
		}
		builder.append("\n\treturn dict;\n}\n\n");
		
		//
		// To JSON methods:
		//
		builder.append("-(NSString *)toJson {\n" + 
				"\treturn [self toJson:NO];\n" + 
				"}\n" + 
				"\n" + 
				"-(NSString *)toJson:(BOOL)pretty {\n" + 
				"\tNSDictionary *dict = [self toDictionary];\n\n" + 
				"\treturn [Serializer jsonStringFromDictionary:dict withPrettyPrint:pretty];\n" + 
				"\n}");
		
		//
		// fromDictionary Method
		//
		builder.append("\n\n+ (" + name + " *)fromDictionary:(NSDictionary *)dict {\n" + 
				"\t" + name + " *object = [[" + name + " alloc]init];\n");
		iter = node.getFieldNames();
		while(iter.hasNext()) {
			String name = iter.next();
			builder.append("\t" + JsonNodeUtils.buildGenerateDeserializePropertyString(node.get(name), getName(), name));
		}
		
		builder.append("\treturn object;\n}\n\n");
		
		//
		// fromJSON Method:
		//
		builder.append("+(" + name + " *)fromJsonString:(NSString *)json {\n" + 
				"\tNSDictionary *dict = [Serializer fromJsonString:json];\n" + 
				"\treturn [" + name + " fromDictionary:dict];\n" + 
				"}\n\n");
		//
		// fromArrayOfDictionaries Method:
		//
		builder.append("+(NSMutableArray *)fromArrayOfDictionaries:(NSArray *)array {\n" + 
				"    NSMutableArray *result = [[NSMutableArray alloc]init];\n" + 
				"    \n" + 
				"    for (NSDictionary *dict in array) {\n" + 
				"        [result addObject:[" + name + " fromDictionary:dict]];\n" + 
				"    }\n" + 
				"    \n" + 
				"    return result;\n" + 
				"}\n\n");
		
		//
		// toArrayOfDictionaries Method:
		//
		builder.append("+(NSMutableArray *)toArrayOfDictionaries:(NSArray *)array {\n" + 
				"    NSMutableArray *result = [[NSMutableArray alloc]init];\n" + 
				"    \n" + 
				"    for(" + name + " *object in array) {\n" + 
				"        [result addObject:[object toDictionary]];\n" + 
				"    }\n" + 
				"    \n" + 
				"    return result;\n" + 
				"}\n\n");
		
		builder.append("@end\n\n");		
		return builder.toString();
	}
	
	public String getName() {
		return name;
	}
	
	public String getJson() {
		return json;
	}
	
	public JsonNode getNode() {
		return node;
	}
	
	public NavigableMap<String, List<JsonDeserializer>> getSubClasses() {
		return subClasses;
	}
	
	private String getDate() {
		return new Date().toString();
	}
}
