package com.intere.generator.metadata;

/**
 * ModelClass.java
 * 
 * Generated by JSON Model Generator v0.0.4 on Thu Apr 02 08:37:29 MDT 2015.
 * https://github.com/intere/generator-json-models
 * 
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
*/

import java.util.ArrayList;
import java.io.Serializable;
import java.util.List;

@SuppressWarnings("serial")
public class ModelClass implements Serializable {
	private String uniqueId;
	private String className;
	private String fileName;
	private String testClassName;
	private String viewClassName;
	private String singleControllerName;
	private String listControllerName;
	private String serviceClassName;
	private String restClientClassName;
	private String restServiceClassName;
	private Boolean readonly;
	private String namespace;
	private Boolean hasSubClasses;
	private List<ModelClassProperty> property = new ArrayList<ModelClassProperty>();
	private List<ModelClassRelatedClassList> relatedClassList = new ArrayList<ModelClassRelatedClassList>();
	private String restUrl;
	private List<ModelClassImports> imports = new ArrayList<ModelClassImports>();
	private List<String> summaryProperties = new ArrayList<String>();

	/**
	 * Setter for uniqueId property
	*/
	public void setUniqueId(String uniqueId) {
		this.uniqueId = uniqueId;
	}

	/**
	 * Getter for uniqueId property
	*/
	public String getUniqueId() {
		return this.uniqueId;
	}

	/**
	 * Setter for className property
	*/
	public void setClassName(String className) {
		this.className = className;
	}

	/**
	 * Getter for className property
	*/
	public String getClassName() {
		return this.className;
	}

	/**
	 * Setter for fileName property
	*/
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	/**
	 * Getter for fileName property
	*/
	public String getFileName() {
		return this.fileName;
	}

	/**
	 * Setter for testClassName property
	*/
	public void setTestClassName(String testClassName) {
		this.testClassName = testClassName;
	}

	/**
	 * Getter for testClassName property
	*/
	public String getTestClassName() {
		return this.testClassName;
	}

	/**
	 * Setter for viewClassName property
	*/
	public void setViewClassName(String viewClassName) {
		this.viewClassName = viewClassName;
	}

	/**
	 * Getter for viewClassName property
	*/
	public String getViewClassName() {
		return this.viewClassName;
	}

	/**
	 * Setter for singleControllerName property
	*/
	public void setSingleControllerName(String singleControllerName) {
		this.singleControllerName = singleControllerName;
	}

	/**
	 * Getter for singleControllerName property
	*/
	public String getSingleControllerName() {
		return this.singleControllerName;
	}

	/**
	 * Setter for listControllerName property
	*/
	public void setListControllerName(String listControllerName) {
		this.listControllerName = listControllerName;
	}

	/**
	 * Getter for listControllerName property
	*/
	public String getListControllerName() {
		return this.listControllerName;
	}

	/**
	 * Setter for serviceClassName property
	*/
	public void setServiceClassName(String serviceClassName) {
		this.serviceClassName = serviceClassName;
	}

	/**
	 * Getter for serviceClassName property
	*/
	public String getServiceClassName() {
		return this.serviceClassName;
	}

	/**
	 * Setter for restClientClassName property
	*/
	public void setRestClientClassName(String restClientClassName) {
		this.restClientClassName = restClientClassName;
	}

	/**
	 * Getter for restClientClassName property
	*/
	public String getRestClientClassName() {
		return this.restClientClassName;
	}

	/**
	 * Setter for restServiceClassName property
	*/
	public void setRestServiceClassName(String restServiceClassName) {
		this.restServiceClassName = restServiceClassName;
	}

	/**
	 * Getter for restServiceClassName property
	*/
	public String getRestServiceClassName() {
		return this.restServiceClassName;
	}

	/**
	 * Setter for readonly property
	*/
	public void setReadonly(Boolean readonly) {
		this.readonly = readonly;
	}

	/**
	 * Getter for readonly property
	*/
	public Boolean getReadonly() {
		return this.readonly;
	}

	/**
	 * Setter for namespace property
	*/
	public void setNamespace(String namespace) {
		this.namespace = namespace;
	}

	/**
	 * Getter for namespace property
	*/
	public String getNamespace() {
		return this.namespace;
	}

	/**
	 * Setter for hasSubClasses property
	*/
	public void setHasSubClasses(Boolean hasSubClasses) {
		this.hasSubClasses = hasSubClasses;
	}

	/**
	 * Getter for hasSubClasses property
	*/
	public Boolean getHasSubClasses() {
		return this.hasSubClasses;
	}

	/**
	 * Setter for property property
	*/
	public void setProperty(List<ModelClassProperty> property) {
		this.property = property;
	}

	/**
	 * Getter for property property
	*/
	public List<ModelClassProperty> getProperty() {
		return this.property;
	}

	/**
	 * Setter for relatedClassList property
	*/
	public void setRelatedClassList(List<ModelClassRelatedClassList> relatedClassList) {
		this.relatedClassList = relatedClassList;
	}

	/**
	 * Getter for relatedClassList property
	*/
	public List<ModelClassRelatedClassList> getRelatedClassList() {
		return this.relatedClassList;
	}

	/**
	 * Setter for restUrl property
	*/
	public void setRestUrl(String restUrl) {
		this.restUrl = restUrl;
	}

	/**
	 * Getter for restUrl property
	*/
	public String getRestUrl() {
		return this.restUrl;
	}

	/**
	 * Setter for imports property
	*/
	public void setImports(List<ModelClassImports> imports) {
		this.imports = imports;
	}

	/**
	 * Getter for imports property
	*/
	public List<ModelClassImports> getImports() {
		return this.imports;
	}

	/**
	 * Setter for summaryProperties property
	*/
	public void setSummaryProperties(List<String> summaryProperties) {
		this.summaryProperties = summaryProperties;
	}

	/**
	 * Getter for summaryProperties property
	*/
	public List<String> getSummaryProperties() {
		return this.summaryProperties;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((uniqueId == null) ? 0 : uniqueId.hashCode());
		result = prime * result + ((className == null) ? 0 : className.hashCode());
		result = prime * result + ((fileName == null) ? 0 : fileName.hashCode());
		result = prime * result + ((testClassName == null) ? 0 : testClassName.hashCode());
		result = prime * result + ((viewClassName == null) ? 0 : viewClassName.hashCode());
		result = prime * result + ((singleControllerName == null) ? 0 : singleControllerName.hashCode());
		result = prime * result + ((listControllerName == null) ? 0 : listControllerName.hashCode());
		result = prime * result + ((serviceClassName == null) ? 0 : serviceClassName.hashCode());
		result = prime * result + ((restClientClassName == null) ? 0 : restClientClassName.hashCode());
		result = prime * result + ((restServiceClassName == null) ? 0 : restServiceClassName.hashCode());
		result = prime * result + ((readonly == null) ? 0 : readonly.hashCode());
		result = prime * result + ((namespace == null) ? 0 : namespace.hashCode());
		result = prime * result + ((hasSubClasses == null) ? 0 : hasSubClasses.hashCode());
		result = prime * result + ((property == null) ? 0 : property.hashCode());
		result = prime * result + ((relatedClassList == null) ? 0 : relatedClassList.hashCode());
		result = prime * result + ((restUrl == null) ? 0 : restUrl.hashCode());
		result = prime * result + ((imports == null) ? 0 : imports.hashCode());
		result = prime * result + ((summaryProperties == null) ? 0 : summaryProperties.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ModelClass other = (ModelClass)obj;
		if(uniqueId == null) {
			if(other.uniqueId != null)
				return false;
		} else if(!uniqueId.equals(other.uniqueId))
			return false;
		if(className == null) {
			if(other.className != null)
				return false;
		} else if(!className.equals(other.className))
			return false;
		if(fileName == null) {
			if(other.fileName != null)
				return false;
		} else if(!fileName.equals(other.fileName))
			return false;
		if(testClassName == null) {
			if(other.testClassName != null)
				return false;
		} else if(!testClassName.equals(other.testClassName))
			return false;
		if(viewClassName == null) {
			if(other.viewClassName != null)
				return false;
		} else if(!viewClassName.equals(other.viewClassName))
			return false;
		if(singleControllerName == null) {
			if(other.singleControllerName != null)
				return false;
		} else if(!singleControllerName.equals(other.singleControllerName))
			return false;
		if(listControllerName == null) {
			if(other.listControllerName != null)
				return false;
		} else if(!listControllerName.equals(other.listControllerName))
			return false;
		if(serviceClassName == null) {
			if(other.serviceClassName != null)
				return false;
		} else if(!serviceClassName.equals(other.serviceClassName))
			return false;
		if(restClientClassName == null) {
			if(other.restClientClassName != null)
				return false;
		} else if(!restClientClassName.equals(other.restClientClassName))
			return false;
		if(restServiceClassName == null) {
			if(other.restServiceClassName != null)
				return false;
		} else if(!restServiceClassName.equals(other.restServiceClassName))
			return false;
		if(readonly == null) {
			if(other.readonly != null)
				return false;
		} else if(!readonly.equals(other.readonly))
			return false;
		if(namespace == null) {
			if(other.namespace != null)
				return false;
		} else if(!namespace.equals(other.namespace))
			return false;
		if(hasSubClasses == null) {
			if(other.hasSubClasses != null)
				return false;
		} else if(!hasSubClasses.equals(other.hasSubClasses))
			return false;
		if(property == null) {
			if(other.property != null)
				return false;
		} else if(!property.equals(other.property))
			return false;
		if(relatedClassList == null) {
			if(other.relatedClassList != null)
				return false;
		} else if(!relatedClassList.equals(other.relatedClassList))
			return false;
		if(restUrl == null) {
			if(other.restUrl != null)
				return false;
		} else if(!restUrl.equals(other.restUrl))
			return false;
		if(imports == null) {
			if(other.imports != null)
				return false;
		} else if(!imports.equals(other.imports))
			return false;
		if(summaryProperties == null) {
			if(other.summaryProperties != null)
				return false;
		} else if(!summaryProperties.equals(other.summaryProperties))
			return false;
		return true;
	}

}	// end ModelClass

