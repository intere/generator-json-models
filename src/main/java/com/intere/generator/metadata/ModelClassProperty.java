package com.intere.generator.metadata;

/**
 * ModelClassProperty.java
 * 
 * Generated by JSON Model Generator v0.0.3 on Fri Feb 27 07:54:08 MST 2015.
 * https://github.com/intere/generator-json-models
 * 
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
*/

import java.io.Serializable;

@SuppressWarnings("serial")
public class ModelClassProperty implements Serializable {
	private String name;
	private Boolean isKey;
	private String type;
	private Boolean isPrimitive;
	private Boolean isTransient;
	private Boolean isVisible;
	private Boolean isReadonly;
	private Boolean isArray;
	private String arraySubType;
	private ModelClassProperty arraySubTypeProperty;
	private ModelClass parentModel;

	/**
	 * Setter for name property
	*/
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Getter for name property
	*/
	public String getName() {
		return this.name;
	}

	/**
	 * Setter for isKey property
	*/
	public void setIsKey(Boolean isKey) {
		this.isKey = isKey;
	}

	/**
	 * Getter for isKey property
	*/
	public Boolean getIsKey() {
		return this.isKey;
	}

	/**
	 * Setter for type property
	*/
	public void setType(String type) {
		this.type = type;
	}

	/**
	 * Getter for type property
	*/
	public String getType() {
		return this.type;
	}

	/**
	 * Setter for isPrimitive property
	*/
	public void setIsPrimitive(Boolean isPrimitive) {
		this.isPrimitive = isPrimitive;
	}

	/**
	 * Getter for isPrimitive property
	*/
	public Boolean getIsPrimitive() {
		return this.isPrimitive;
	}

	/**
	 * Setter for isTransient property
	*/
	public void setIsTransient(Boolean isTransient) {
		this.isTransient = isTransient;
	}

	/**
	 * Getter for isTransient property
	*/
	public Boolean getIsTransient() {
		return this.isTransient;
	}

	/**
	 * Setter for isVisible property
	*/
	public void setIsVisible(Boolean isVisible) {
		this.isVisible = isVisible;
	}

	/**
	 * Getter for isVisible property
	*/
	public Boolean getIsVisible() {
		return this.isVisible;
	}

	/**
	 * Setter for isReadonly property
	*/
	public void setIsReadonly(Boolean isReadonly) {
		this.isReadonly = isReadonly;
	}

	/**
	 * Getter for isReadonly property
	*/
	public Boolean getIsReadonly() {
		return this.isReadonly;
	}

	/**
	 * Setter for isArray property
	*/
	public void setIsArray(Boolean isArray) {
		this.isArray = isArray;
	}

	/**
	 * Getter for isArray property
	*/
	public Boolean getIsArray() {
		return this.isArray;
	}

	/**
	 * Setter for arraySubType property
	*/
	public void setArraySubType(String arraySubType) {
		this.arraySubType = arraySubType;
	}

	/**
	 * Getter for arraySubType property
	*/
	public String getArraySubType() {
		return this.arraySubType;
	}

	/**
	 * Setter for arraySubTypeProperty property
	*/
	public void setArraySubTypeProperty(ModelClassProperty arraySubTypeProperty) {
		this.arraySubTypeProperty = arraySubTypeProperty;
	}

	/**
	 * Getter for arraySubTypeProperty property
	*/
	public ModelClassProperty getArraySubTypeProperty() {
		return this.arraySubTypeProperty;
	}

	/**
	 * Setter for parentModel property
	*/
	public void setParentModel(ModelClass parentModel) {
		this.parentModel = parentModel;
	}

	/**
	 * Getter for parentModel property
	*/
	public ModelClass getParentModel() {
		return this.parentModel;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((isKey == null) ? 0 : isKey.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		result = prime * result + ((isPrimitive == null) ? 0 : isPrimitive.hashCode());
		result = prime * result + ((isTransient == null) ? 0 : isTransient.hashCode());
		result = prime * result + ((isVisible == null) ? 0 : isVisible.hashCode());
		result = prime * result + ((isReadonly == null) ? 0 : isReadonly.hashCode());
		result = prime * result + ((isArray == null) ? 0 : isArray.hashCode());
		result = prime * result + ((arraySubType == null) ? 0 : arraySubType.hashCode());
		result = prime * result + ((arraySubTypeProperty == null) ? 0 : arraySubTypeProperty.hashCode());
		result = prime * result + ((parentModel == null) ? 0 : parentModel.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ModelClassProperty other = (ModelClassProperty)obj;
		if(name == null) {
			if(other.name != null)
				return false;
		} else if(!name.equals(other.name))
			return false;
		if(isKey == null) {
			if(other.isKey != null)
				return false;
		} else if(!isKey.equals(other.isKey))
			return false;
		if(type == null) {
			if(other.type != null)
				return false;
		} else if(!type.equals(other.type))
			return false;
		if(isPrimitive == null) {
			if(other.isPrimitive != null)
				return false;
		} else if(!isPrimitive.equals(other.isPrimitive))
			return false;
		if(isTransient == null) {
			if(other.isTransient != null)
				return false;
		} else if(!isTransient.equals(other.isTransient))
			return false;
		if(isVisible == null) {
			if(other.isVisible != null)
				return false;
		} else if(!isVisible.equals(other.isVisible))
			return false;
		if(isReadonly == null) {
			if(other.isReadonly != null)
				return false;
		} else if(!isReadonly.equals(other.isReadonly))
			return false;
		if(isArray == null) {
			if(other.isArray != null)
				return false;
		} else if(!isArray.equals(other.isArray))
			return false;
		if(arraySubType == null) {
			if(other.arraySubType != null)
				return false;
		} else if(!arraySubType.equals(other.arraySubType))
			return false;
		if(arraySubTypeProperty == null) {
			if(other.arraySubTypeProperty != null)
				return false;
		} else if(!arraySubTypeProperty.equals(other.arraySubTypeProperty))
			return false;
		if(parentModel == null) {
			if(other.parentModel != null)
				return false;
		} else if(!parentModel.equals(other.parentModel))
			return false;
		return true;
	}

}	// end ModelClassProperty

