package ${model.namespace};

/**
 * ${filename}
 *
 * Generated by JSON Model Generator v0.0.4 on ${date?date}
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.Before;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

<#list imports as import>
import ${import};
</#list>

public class ${model.testClassName} {

    private static final ObjectMapper jsonMapper = new ObjectMapper();
    private ${model.className} instance;

    @Before
    public void setUp() throws JsonParseException, JsonMappingException, IOException {
        InputStream in = new ByteArrayInputStream("{}".getBytes());
        instance = jsonMapper.readValue(in, ${model.className}.class);
    }

    <#list properties as property>
    @Test
    public void test${property.methodName}() throws Exception {
    <#switch property.dataType>
        <#case "CLASS">
        final ${property.type} expected = new ${property.type}();
        <#break>
        <#case "ARRAY">
        final List${property.javaArrayType} expected = new ArrayList${property.javaArrayType}();
        <#break>
        <#case "DATE">
        final Date expected = new Date();
        <#break>
        <#default>
        <#assign data=generator.data(property)>
        final ${property.dataType.javaName} expected = ${data};
        <#break>
    </#switch>
        instance.set${property.methodName}(expected);
        String serialized = serialize(instance);
        instance = deserialize(serialized);
        assertEquals("The ${property.name} property didn't deserialize properly", expected, instance.get${property.methodName}());
    }
    </#list>

	protected String serialize(${model.className} object)  throws JsonGenerationException, JsonMappingException, IOException {
		return jsonMapper.writeValueAsString(object);
	}

	protected ${model.className} deserialize(String json) throws JsonParseException, JsonMappingException, IOException {
		return jsonMapper.readValue(json, ${model.className}.class);
	}
}