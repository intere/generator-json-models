/**
 * ${filename}
 *
 * Generated by JSON Model Generator v${version} on ${date?date}
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

#import "${model.className}.h"
#import "Serializer.h"

#pragma mark - Serialization Constants

<#list properties as property>
<#assign constant=interpreter.createSerializeConstantSymbolName(property.name)>
#define ${constant} @"${property.name}"
</#list>

#pragma mark - ${model.className} Implementation

@implementation ${model.className}

#pragma mark Serialization Methods

-(NSDictionary *)toDictionary {
    NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
<#list properties as property>
    <#assign constant=interpreter.createSerializeConstantSymbolName(property.name)>
    <#switch property.dataType>
    <#case "CLASS">
    if([dict objectForKey:${constant}] && ![[NSNull null] isEqual:[dict objectForKey:${constant}]]) {
        [Serializer setDict:dict object:[self.${property.alias} toDictionary] forKey:${constant}];
    }
    <#break>
    <#case "ARRAY">
        <#switch property.arraySubTypeProperty.dataType>
        <#case "CLASS">
    [Serializer setDict:dict object:[${property.arraySubType} toArrayOfDictionaries:self.${property.alias}] forKey:${constant}];
        <#break>
        <#default>
    [Serializer setDict:dict object:self.${property.alias} forKey:${constant}];
        <#break>
        </#switch>
    <#break>
    <#case "DATE">
    [Serializer setDict:dict dateValue:self.${property.alias} forKey:${constant}];
    <#break>
    <#case "DOUBLE">
    [Serializer setDict:dict doubleValue:self.${property.alias} forKey:${constant}];
    <#break>
    <#case "BOOLEAN">
    [Serializer setDict:dict boolValue:self.${property.alias} forKey:${constant}];
    <#break>
    <#case "LONG">
    [Serializer setDict:dict intValue:self.${property.alias} forKey:${constant}];
    <#break>
    <#default>
    // Default
    [Serializer setDict:dict object:self.${property.alias} forKey:${constant}];
    <#break>
    </#switch>
</#list>

    return dict;
}

-(NSString *)toJson {
	return [self toJson:NO];
}

-(NSString *)toJson:(BOOL)pretty {
	NSDictionary *dict = [self toDictionary];
	return [Serializer jsonStringFromDictionary:dict withPrettyPrint:pretty];
}

+(${model.className}*)fromDictionary:(NSDictionary *)dict {
	${model.className} *object = [[${model.className} alloc]init];

<#list properties as property>
    <#assign constant=interpreter.createSerializeConstantSymbolName(property.name)>
    <#switch property.dataType>
    <#case "CLASS">
    if([dict objectForKey:${constant}] && ![[NSNull null] isEqual:[dict objectForKey:${constant}]]) {
        object.${property.alias} = [${property.type} fromDictionary:[dict objectForKey:${constant}]];
    }
    <#break>
    <#case "ARRAY">
        <#switch property.arraySubTypeProperty.dataType>
        <#case "CLASS">
    object.${property.alias} = [${property.arraySubType} fromArrayOfDictionaries:[Serializer getArrayFromDict:dict forKey:${constant}]];
        <#break>
        <#default>
    object.${property.alias} = [[NSMutableArray alloc]initWithArray:[Serializer getArrayFromDict:dict forKey:${constant}]];
        <#break>
        </#switch>
    <#break>
    <#case "DATE">
    object.${property.alias} = [Serializer getDateFromDict:dict forKey:${constant} orDefaultTo:nil];
    <#break>
    <#case "DOUBLE">
    object.${property.alias}= [Serializer getDoubleFromDict:dict forKey:${constant} orDefaultTo:0.0];
    <#break>
    <#case "LONG">
    object.${property.alias}= [Serializer getIntegerFromDict:dict forKey:${constant} orDefaultTo:0];
    <#break>
    <#case "STRING">
    <#case "TEXT">
    <#case "IMAGE">
    object.${property.alias} = [Serializer safeGetDictString:dict withKey:${constant}];
    <#break>
    <#case "BOOLEAN">
    object.${property.alias} = [Serializer getBoolFromDict:dict forKey:${constant} orDefaultTo:NO];
    <#break>
    <#default>
    // Unhandled type: ${property.name} - ${property.dataType} - ${property.type}
    <#break>
    </#switch>
</#list>

	return object;
}

+(${model.className}*)fromJsonString:(NSString *)json {
	NSDictionary *dict = [Serializer fromJsonString:json];
	return [${model.className} fromDictionary:dict];
}

+(NSMutableArray *)fromArrayOfDictionaries:(NSArray *)array {
	NSMutableArray *result = [[NSMutableArray alloc]init];
	for (NSDictionary *dict in array) {
		[result addObject:[${model.className} fromDictionary:dict]];
	}
	return result;
}

+(NSMutableArray *)toArrayOfDictionaries:(NSArray *)array {
	NSMutableArray *result = [[NSMutableArray alloc]init];
	for(${model.className} *object in array) {
		[result addObject:[object toDictionary]];
	}
	return result;
}

@end