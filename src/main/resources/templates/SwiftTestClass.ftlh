/**
 * ${filename}
 *
 * Generated by JSON Model Generator v${version} on ${date?date}
 * https://github.com/intere/generator-json-models
 *
 * The generator tool is licensed under the LGPL: http://www.gnu.org/licenses/lgpl-3.0.html#content
 */

import XCTest
@testable import ${model.namespace}

class ${model.testClassName}: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }
}

<#list properties as property>
<#if !property.isTransient>
// MARK: - ${property.name} Tests

extension ${model.testClassName} {

    func test${property.methodName}FromMap() {
        <#switch property.dataType>
        <#case "CLASS">
        guard let model = ${model.className}.fromMap(["${property.name}":[:]]) else {
            XCTFail("The ${model.className} was nil")
            return
        }

        XCTAssertNotNil(model.${property.alias}, "The ${property.alias} is nil")
        <#break>

        <#case "DATE">
        let date = NSDate()
        let dateInt = Int(date.timeIntervalSince1970 * 1000) // SSE (double) to MSSE (Int)
        guard let model = ${model.className}.fromMap(["${property.name}": dateInt]) else {
            XCTFail("The ${model.className} was nil")
            return
        }

        guard let result = model.${property.alias} else {
            XCTFail("The ${property.alias} date is nil")
            return
        }

        XCTAssertEqualWithAccuracy(date.timeIntervalSince1970, result.timeIntervalSince1970, accuracy: 0.01, "The ${property.alias} date is incorrect")
        <#break>

        <#case "ARRAY">
        let arrayData = ${generator.arrayData(property, 2)}  // Array of 2 empty objects
        guard let model = ${model.className}.fromMap(["${property.name}": arrayData ]) else {
            XCTFail("The ${model.className} was nil")
            return
        }

        XCTAssertNotNil(model.${property.alias}, "The ${property.alias} was nil")
        XCTAssertEqual(2, model.${property.alias}?.count, "The ${property.alias} has the wrong number of objects")
        <#break>

        <#default>
        <#assign data=generator.data(property)>
        guard let model = ${model.className}.fromMap(["${property.name}": ${data}]) else {
            XCTFail("The ${model.className} was nil")
            return
        }

        XCTAssertEqual(${data}, model.${property.alias}, "The ${property.alias} is incorrect")
        <#break>

        </#switch>
    }

    func test${property.methodName}FromEmptyMap() {
        guard let model = ${model.className}.fromMap([:]) else {
            XCTFail("The ${model.className} was nil")
            return
        }

        XCTAssertNil(model.${property.alias}, "The ${property.alias} is not nil")
    }
}

</#if>
</#list>